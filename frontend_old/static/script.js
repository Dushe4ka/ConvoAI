const chatBox = document.getElementById("chat-box");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");
const fileInput = document.getElementById("file-input");
const uploadBtn = document.getElementById("upload-btn");
const newChatBtn = document.getElementById("newChatBtn"); // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π —á–∞—Ç"
const clearChatBtn = document.getElementById("clearChatBtn"); // –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è session_id (–µ—Å–ª–∏ –Ω–µ—Ç –≤ localStorage)
let sessionId = localStorage.getItem("session_id") || generateSessionId();
localStorage.setItem("session_id", sessionId);

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ session_id
function generateSessionId() {
    return Math.random().toString(36).substr(2, 9);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const message = userInput.value.trim();
    if (!message) return;

    addMessage(message, "user-message");
    userInput.value = "";

    addMessage("...", "ai-message", true);

    try {
        const response = await fetch("/chat", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ session_id: sessionId, message }),
        });

        const data = await response.json();
        removeLoading();
        addMessage(data.response, "ai-message");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        removeLoading();
        addMessage("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ üò¢", "ai-message");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function addMessage(text, className, isLoading = false) {
    const msg = document.createElement("div");
    msg.classList.add("message", className);
    if (isLoading) msg.classList.add("loading");
    msg.innerHTML = text;
    chatBox.appendChild(msg);
    chatBox.scrollTop = chatBox.scrollHeight;
}

// –£–¥–∞–ª–µ–Ω–∏–µ "..."
function removeLoading() {
    const loading = document.querySelector(".loading");
    if (loading) loading.remove();
}

// –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
sendBtn.addEventListener("click", sendMessage);
userInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") sendMessage();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadChatHistory() {
    try {
        const response = await fetch(`/history/${sessionId}`);
        const history = await response.json();
        history.forEach(msg => {
            addMessage(msg.message, msg.role === "user" ? "user-message" : "ai-message");
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", error);
    }
}

window.onload = loadChatHistory;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
uploadBtn.addEventListener("click", async () => {
    if (fileInput.files.length === 0) {
        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.");
        return;
    }

    let formData = new FormData();
    formData.append("file", fileInput.files[0]);

    addMessage("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...", "ai-message", true);
    uploadBtn.disabled = true;

    try {
        let response = await fetch("/upload_file", {
            method: "POST",
            body: formData
        });

        let result = await response.json();
        removeLoading();
        alert(result.message);
        addMessage("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ‚úÖ", "ai-message");
    } catch (error) {
        removeLoading();
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.");
        console.error("–û—à–∏–±–∫–∞:", error);
        addMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ‚ùå", "ai-message");
    }

    uploadBtn.disabled = false;
});

// --- –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" ---
clearChatBtn.addEventListener("click", async () => {
    if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?")) return;

    try {
        await fetch(`/chat/${sessionId}`, { method: "DELETE" }); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        chatBox.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        alert("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.");
    }
});

// --- –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π —á–∞—Ç" ---
newChatBtn.addEventListener("click", async () => {
    if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç?")) return;

    try {
        const response = await fetch("/new_chat"); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const data = await response.json();

        sessionId = data.session_id;
        localStorage.setItem("session_id", sessionId);
        chatBox.innerHTML = ""; // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

        alert(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç (ID: ${sessionId})`);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.");
    }
});
