from fastapi import HTTPException, Depends, UploadFile
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from langchain.memory import ConversationBufferMemory
from langchain_ollama import OllamaLLM, OllamaEmbeddings
from pydantic import BaseModel
import logging
import re
import uuid
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
from dateutil.parser import parse
import calendar

from backend_test.auth_utils import get_current_user
from database import get_db, ChatMessage, User
from qdrant_db import qdrant_client, collection_name

logger = logging.getLogger(__name__)
llm = OllamaLLM(model="llama3.2")
embed_model = OllamaEmbeddings(model="llama3.2")
ai_memories = {}

# –ü–æ–ª–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
DEFAULT_CATEGORIES = {
    "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ"],
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"],
        "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è": ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]
    },
    "–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã": {
        "–§–∏–Ω–∞–Ω—Å—ã": ["–ë–∞–Ω–∫–∏", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"],
        "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥": ["SEO", "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–°–æ—Ü—Å–µ—Ç–∏"],
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "HR", "–ü—Ä–æ–µ–∫—Ç—ã"]
    },
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {
        "–®–∫–æ–ª–∞": ["–£—á–µ–±–Ω–∏–∫–∏", "–ú–µ—Ç–æ–¥–∏—á–∫–∏", "–ï–ì–≠"],
        "–í–£–ó": ["–õ–µ–∫—Ü–∏–∏", "–ö—É—Ä—Å–æ–≤—ã–µ", "–ù–∞—É–∫–∞"],
        "–°–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": ["–ö–Ω–∏–≥–∏", "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã", "–°—Ç–∞—Ç—å–∏"]
    },
    "–ó–¥–æ—Ä–æ–≤—å–µ": {
        "–ú–µ–¥–∏—Ü–∏–Ω–∞": ["–ë–æ–ª–µ–∑–Ω–∏", "–õ–µ–∫–∞—Ä—Å—Ç–≤–∞", "–ê–Ω–∞–ª–∏–∑—ã"],
        "–°–ø–æ—Ä—Ç": ["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ü–∏—Ç–∞–Ω–∏–µ", "–ë–∏–æ–º–µ—Ö–∞–Ω–∏–∫–∞"],
        "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–°—Ç—Ä–µ—Å—Å", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"]
    },
    "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏ –ø—Ä–∞–≤–æ": {
        "–ó–∞–∫–æ–Ω—ã": ["–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã", "–ö–æ–¥–µ–∫—Å—ã", "–†–µ—Ñ–æ—Ä–º—ã"],
        "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": ["–ü–æ–∫—É–ø–∫–∞", "–ê—Ä–µ–Ω–¥–∞", "–ö–∞–¥–∞—Å—Ç—Ä"],
        "–ù–∞–ª–æ–≥–∏": ["–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–í—ã—á–µ—Ç—ã", "–ü—Ä–æ–≤–µ—Ä–∫–∏"]
    },
    "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": {
        "–ò—Å–∫—É—Å—Å—Ç–≤–æ": ["–ñ–∏–≤–æ–ø–∏—Å—å", "–ú—É–∑—ã–∫–∞", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": ["–ö–Ω–∏–≥–∏", "–ü–æ—ç–∑–∏—è", "–°—Ü–µ–Ω–∞—Ä–∏–∏"],
        "–î–∏–∑–∞–π–Ω": ["–ì—Ä–∞—Ñ–∏–∫–∞", "–ò–Ω—Ç–µ—Ä—å–µ—Ä—ã", "UI/UX"]
    },
    "–†–∞–∑–Ω–æ–µ": {
        "–ò—Å—Ç–æ—Ä–∏—è": ["–°–æ–±—ã—Ç–∏—è", "–õ–∏—á–Ω–æ—Å—Ç–∏", "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"],
        "–§–∏–ª–æ—Å–æ—Ñ–∏—è": ["–¢–µ–æ—Ä–∏–∏", "–≠—Ç–∏–∫–∞", "–õ–æ–≥–∏–∫–∞"],
        "–•–æ–±–±–∏": ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–ì–µ–π–º–∏–Ω–≥"]
    }
}


class ChatRequest(BaseModel):
    session_id: str
    message: str


def extract_dates_and_category(text: str) -> Tuple[Optional[Dict[str, str]], Optional[str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–¥–∞—Ç—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏—è).
    """
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
    1. –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    2. –û—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞: {list(DEFAULT_CATEGORIES.keys())}

    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤ JSON:
    {{
        "dates": {{
            "start": "YYYY-MM-DD" –∏–ª–∏ null,
            "end": "YYYY-MM-DD" –∏–ª–∏ null
        }},
        "category": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –∏–ª–∏ null
    }}

    –ü—Ä–∏–º–µ—Ä—ã:
    1. "–ù–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∑–∞ 2023 –≥–æ–¥" ‚Üí {{"dates": {{"start": "2023-01-01", "end": "2023-12-31"}}, "category": "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"}}
    2. "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –º–µ–¥–∏—Ü–∏–Ω–µ" ‚Üí {{"dates": {{"start": "{datetime.now().replace(day=1).strftime('%Y-%m-%d')}", "end": null}}, "category": "–ó–¥–æ—Ä–æ–≤—å–µ"}}
    3. "–õ—é–±—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö" ‚Üí {{"dates": null, "category": "–ë–∏–∑–Ω–µ—Å –∏ —Ñ–∏–Ω–∞–Ω—Å—ã"}}

    –¢–µ–∫—Å—Ç: "{text}"
    """

    try:
        response = llm.invoke(prompt)
        result = eval(response)  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π eval –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ JSON

        dates = None
        if result.get("dates"):
            dates = {
                "start": parse(result["dates"]["start"]).strftime('%Y-%m-%d') if result["dates"].get("start") else None,
                "end": parse(result["dates"]["end"]).strftime('%Y-%m-%d') if result["dates"].get("end") else None
            }

        category = result.get("category") if result.get("category") in DEFAULT_CATEGORIES else None

        return dates, category
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None, None


def detect_subcategory(text: str, main_category: str) -> Optional[str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–∞"""
    if main_category not in DEFAULT_CATEGORIES:
        return None

    prompt = f"""
    –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: {list(DEFAULT_CATEGORIES[main_category].keys())}
    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –¢–µ–∫—Å—Ç: "{text[:300]}"
    """
    subcategory = llm.invoke(prompt).strip()
    return subcategory if subcategory in DEFAULT_CATEGORIES[main_category] else None


def condense_question(user_message: str, memory: ConversationBufferMemory) -> str:
    """–£—Ç–æ—á–Ω—è–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞"""
    history = memory.load_memory_variables({}).get("history", "")
    prompt = f"""
    –£–ª—É—á—à–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª.

    –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
    {history}

    –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
    "{user_message}"

    –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
    """
    return llm.invoke(prompt).strip()


def generate_search_keywords(question: str, category: Optional[str] = None) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    prompt = f"""
    –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. 
    {"–£—á—Ç–∏, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + category + "." if category else ""}
    –§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

    –í–æ–ø—Ä–æ—Å: "{question}"

    –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
    """
    return llm.invoke(prompt).strip()


async def search_in_qdrant(
        query: str,
        category: Optional[str] = None,
        subcategory: Optional[str] = None,
        date_range: Optional[Dict[str, str]] = None,
        limit: int = 15
) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –≤ Qdrant —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    from qdrant_client.models import Filter, FieldCondition, MatchValue, Range

    must_conditions = []

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category:
        must_conditions.append(FieldCondition(
            key="category",
            match=MatchValue(value=category)
        ))

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if subcategory:
            must_conditions.append(FieldCondition(
                key="subcategory",
                match=MatchValue(value=subcategory)
            ))

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
    if date_range:
        date_conditions = []
        if date_range.get("start"):
            date_conditions.append(Range(gte=date_range["start"]))
        if date_range.get("end"):
            date_conditions.append(Range(lte=date_range["end"]))

        if date_conditions:
            must_conditions.append(FieldCondition(
                key="date",
                range=Range(**{
                    k: v for cond in date_conditions
                    for k, v in cond.dict().items()
                })
            ))

    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    query_embedding = embed_model.embed_query(query)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    search_results = qdrant_client.search(
        collection_name=collection_name,
        query_vector=query_embedding,
        query_filter=Filter(must=must_conditions) if must_conditions else None,
        limit=limit,
        with_payload=True
    )

    return [{
        "text": hit.payload["text"],
        "source": hit.payload.get("source", "unknown"),
        "date": hit.payload.get("date"),
        "category": hit.payload.get("category"),
        "subcategory": hit.payload.get("subcategory"),
        "score": hit.score
    } for hit in search_results]


async def generate_rag_response(
        query: str,
        context: List[Dict],
        dates: Optional[Dict[str, str]] = None,
        category: Optional[str] = None
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context_str = "\n\n".join([
        f"üîπ –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
        f"–î–∞—Ç–∞: {item.get('date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        f"{' > ' + item['subcategory'] if item.get('subcategory') else ''}\n"
        f"–ö–æ–Ω—Ç–µ–Ω—Ç: {item['text'][:300]}..."
        for item in context
    ])

    date_info = ""
    if dates:
        start = dates.get('start', '–ª—é–±–æ–µ –≤—Ä–µ–º—è')
        end = dates.get('end', '–ª—é–±–æ–µ –≤—Ä–µ–º—è')
        date_info = f"\n\nüìÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ –ø–µ—Ä–∏–æ–¥: {start} ‚Äî {end}"

    category_info = f" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'" if category else ""

    prompt = f"""
    –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    {date_info}
    {f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: {category_info}" if category_info else ""}

    ===== –î–ê–ù–ù–´–ï =====
    {context_str if context else "–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"}

    ===== –í–û–ü–†–û–° =====
    {query}

    ===== –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –û–¢–í–ï–¢–£ =====
    1. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    2. –ü—Ä–∏–≤–µ–¥–∏ 3-5 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤/—Ü–∏—Ñ—Ä
    3. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "[1] filename.pdf"
    4. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
    5. –°–æ—Ö—Ä–∞–Ω—è–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω

    –û—Ç–≤–µ—Ç:
    """
    return llm.invoke(prompt)


async def chat_endpoint(
        request: ChatRequest,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    session_id = request.session_id
    user_message = request.message.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if not user_message or len(user_message) < 3:
        raise HTTPException(status_code=400, detail="–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    db.add(ChatMessage(
        session_id=session_id,
        role="user",
        message=user_message,
        user_id=current_user.id
    ))
    db.commit()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
    if session_id not in ai_memories:
        ai_memories[session_id] = ConversationBufferMemory(memory_key="history", return_messages=True)
    memory = ai_memories[session_id]

    try:
        # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        refined_query = condense_question(user_message, memory)
        dates, category = extract_dates_and_category(refined_query)
        subcategory = detect_subcategory(refined_query, category) if category else None
        keywords = generate_search_keywords(refined_query, category)

        logger.info(
            f"–ü–æ–∏—Å–∫: '{refined_query}' | "
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}{' > ' + subcategory if subcategory else ''} | "
            f"–î–∞—Ç—ã: {dates} | "
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}"
        )

        # 2. –ü–æ–∏—Å–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        search_results = await search_in_qdrant(
            query=keywords,
            category=category,
            subcategory=subcategory,
            date_range=dates,
            limit=15
        )

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        ai_response = await generate_rag_response(
            query=user_message,
            context=search_results,
            dates=dates,
            category=category
        )

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if len(ai_response) > 10000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            ai_response = ai_response[:10000] + "\n\n[–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]"

        db.add(ChatMessage(
            session_id=session_id,
            role="ai",
            message=ai_response,
            user_id=current_user.id
        ))
        db.commit()
        memory.save_context({"input": user_message}, {"output": ai_response})

        return JSONResponse(content={
            "response": ai_response,
            "metadata": {
                "category": category,
                "subcategory": subcategory,
                "dates": dates,
                "sources": list(set(res['source'] for res in search_results)),
                "user_id": current_user.id
            }
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


async def get_chat_history(
        session_id: str,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = db.query(ChatMessage).filter(
        ChatMessage.session_id == session_id,
        ChatMessage.user_id == current_user.id
    ).order_by(ChatMessage.timestamp.asc()).all()

    return [{
        "role": msg.role,
        "message": msg.message,
        "timestamp": msg.timestamp.isoformat()
    } for msg in history]


async def clear_chat_history(
        session_id: str,
        db: Session = Depends(get_db),
        current_user: User = Depends(get_current_user)
):
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    deleted_count = db.query(ChatMessage).filter(
        ChatMessage.session_id == session_id,
        ChatMessage.user_id == current_user.id
    ).delete()
    db.commit()

    if deleted_count > 0:
        ai_memories.pop(session_id, None)

    return JSONResponse(content={
        "message": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞",
        "deleted_messages": deleted_count,
        "session_id": session_id
    })


async def create_new_chat(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    new_session_id = str(uuid.uuid4())

    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å–∏—Å—Ç–µ–º–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —á–∞—Ç–µ
    db.add(ChatMessage(
        session_id=new_session_id,
        role="system",
        message="–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω",
        user_id=current_user.id
    ))
    db.commit()

    return JSONResponse(content={
        "session_id": new_session_id,
        "user_id": current_user.id,
        "created_at": datetime.utcnow().isoformat()
    })


async def get_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    return JSONResponse(content=DEFAULT_CATEGORIES)